#include <iostream>
//В некоторых случаях приходится производить перобразования типов, которые связаны между собой отношениями наследования

//Если мы преобразуем тип от наследного к родительскому, то оно может быть произведено автоматически, неявно, такое преобразование называют upcasting (преобразование вверх по иерархии)
struct Base {
	virtual void say() const { std::cout << "Base" << std::endl; }
};

struct Derived : Base {
	void say() const override { std::cout << "Derived" << std::endl; }
};

void upcasting_test() {
	Derived d;
	d.say();

	Base b = d; //здесь произойдёт преобразование через конструирование - static_cast
	b.say(); //сработает Base::say() - построен новый объект, нет полиморфизма

	Base &b_ref = d; //здесь произойдёт преобразование через адреса, т.е. новый объект не будет построен, а будет выведен верный адрес вложенного в Derived объекта типа Base
	b_ref.say(); //сработает Derived::say() - полиморфизм подтипов

	Base *b_ptr = &d; //здесь произойдёт то же самое - выведение верного адреса вложенного объекта
	b_ptr->say(); //сработает Derived::say() - полиморфизм подтипов
}

int main() {
	if (false) upcasting_test();

	return 0;
}